Bridge Description
-------------------------------------------------

Intent - decouple an abstraction from it's implementation so that the two can vary independently.

Motivation - the Bridge pattern is useful when we want to avoid coupling an abstraction with one
specific implementation and also to allow reusing concrete implementations by multiple abstractions.
Usualy when we want to extend the application with multiple implementations, we use inheritance,
but this approach isn't always flexible enough. Inheritance binds an implementation to the abstraction
permanently, which makes it difficult to modify, extend and reuse abstractions and implementations
independently.

Applicability - Bridge should be used when:
   - you want to avoid permanent binding between an abstraction and it's implementation.
   - you want to avoid managing a complex and hard to maintain inheritance hierarchy for
     all the possible concrete implementations.
   - changes in the implementation of an abstraction should have no impact on clients - the 
     code should not have to be recompiled. Reference - https://stackoverflow.com/questions/22674613/how-bridge-pattern-help-for-decoupling-the-implmentation-and-avoid-recompiling-o
   - you want to be able to reuse implementation among multiple refined abstractions. 
     (with inheritance based approach you will not be able to do that)

Implementation:
   - Bridge should be implemented in a way that supports swapping implementations easily.
     This is helpful because if there is a new business requirement, all we have to do
     is create a new Concrete Implementor for the new requirement implementation.
   - Bridge pattern should be implemented in a way which supports independently
     extending the refined abstractions and concrete implementations.

Consequences:
   - decouples interface and implementation.
   - improves extensibility.
   - hides implementation details from clients.
   - changing an implementation class doesn't require recompiling the abstractions.
     

Structure:
   - AbstractFactory (IBetsAbstractFactory.cs)
   - ConcreteFactory (MansionBetsAbstractFactory.cs, ToteBetsAbstractFactory.cs)
   - AbstractProduct (IBetInfo.cs, IPlaceBetsButton.cs)
   - ConcreteProduct (MansionBetInfo.cs, MansionPlaceBetsButton.cs, ToteBetInfo.cs, TotePlaceBetsButton.cs)
   - Client (BetsState.cs)

Related Patterns:
   - Adapter - The differences between the two are that The Adapter makes things work after they're designed
     while Bridge makes them work before they are. 
   - Abstract Factory
   - Strategy